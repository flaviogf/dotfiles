#!/bin/env ruby

# frozen_string_literal: true

module Emacs
  class Client
    def eval(expression)
      `emacsclient --socket=emacs --eval '#{expression}' 2> /dev/null`
    end

    def org_timer_value_string
      '(org-timer-value-string)'
    end
  end
end

class Pomodoro
  def initialize(io)
    @io = io
  end

  def output(value)
    match_data = value.match(/(\d{1,2}):(\d{1,2}):(\d{1,2})/)

    return @io.print("00:00:00\n") if match_data.nil?

    hour, minutes, seconds = match_data.captures

    return @io.print("00:00:00\n") if hour == '0' && minutes == '00' && seconds == '01'

    @io.printf("%02d:%02d:%02d\n", hour.to_i, minutes.to_i, seconds.to_i)
  end
end

emacsclient = Emacs::Client.new
value = emacsclient.eval(emacsclient.org_timer_value_string)

pomodoro = Pomodoro.new($stdout)
pomodoro.output(value)
