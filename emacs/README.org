#+TITLE: Emacs
#+AUTHOR: flaviogf
#+PROPERTY: header-args:emacs-lisp :tangle init.el

* Package Management
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

* Settings
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-16"))
  (add-to-list 'exec-path "/home/flaviogf/.asdf/shims")
  (add-to-list 'exec-path "/home/flaviogf/.asdf/bin")
#+end_src

* Customization
#+begin_src emacs-lisp
  (customize-set-variable 'c-basic-offset 2)
  (customize-set-variable 'column-number-mode t)
  (customize-set-variable 'cperl-indent-level 2)
  (customize-set-variable 'dired-listing-switches "-agho --group-directories-first")
  (customize-set-variable 'fill-column 120)
  (customize-set-variable 'indent-tabs-mode nil)
  (customize-set-variable 'inhibit-startup-message t)
  (customize-set-variable 'inhibit-splash-screen t)
  (customize-set-variable 'initial-scratch-message nil)
  (customize-set-variable 'make-backup-files nil)
  (customize-set-variable 'menu-bar-mode nil)
  (customize-set-variable 'scroll-bar-mode nil)
  (customize-set-variable 'tab-width 2)
  (customize-set-variable 'tool-bar-mode nil)
  (customize-set-variable 'truncate-lines t)
  (customize-set-variable 'use-package-always-ensure t)
  (customize-set-variable 'whitespace-line-column 120)
  (customize-set-variable 'whitespace-style '(face lines-tail))
#+end_src

* Packages
** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :init (company-mode))
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :init (counsel-mode))
#+end_src

** Display Fill Column Indicator
#+begin_src emacs-lisp
  (use-package display-fill-column-indicator
    :ensure nil
    :hook (prog-mode . display-fill-column-indicator-mode))
#+end_src

** Display Line Numbers
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :hook (prog-mode . display-line-numbers-mode))
#+end_src

** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init (load-theme 'doom-dracula t))
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode))
#+end_src

** Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :init (editorconfig-mode))
#+end_src

** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :custom
    (elfeed-search-filter "@1-week-ago +unread")
    (elfeed-feeds '(("jovemnerd.com.br/feed/" news) ("blog.digitalocean.com/rss/" tech))))
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package evil
    :custom
    (evil-shift-width 2)
    (evil-want-C-u-scroll t)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    :init (evil-mode))

  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode))
#+end_src

** Go Mode
#+begin_src emacs-lisp
  (use-package go-mode
    :custom (gofmt-command "goimports"))
#+end_src

** Haskell Mode
#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

** Hl Line
#+begin_src emacs-lisp
  (use-package hl-line
    :ensure nil
    :hook (prog-mode . hl-line-mode))
#+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :init (ivy-mode))
#+end_src

** Lsp Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook
    (go-mode . lsp)
    (ruby-mode . lsp)
    :custom
    (lsp-diagnostics-provider :none)
    (lsp-eldoc-enable-hover nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-keymap-prefix "C-c l")
    (lsp-modeline-code-actions-enable nil)
    (lsp-ui-sideline-enable nil))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Org
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-confirm-babel-evaluate nil)
    (org-hide-emphasis-markers t)
    (org-startup-folded t)
    :ensure nil
    :init (org-babel-do-load-languages 'org-babel-load-languages '((ruby . t))))

  (use-package org-indent
    :ensure nil
    :hook (org-mode . org-indent-mode))

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))

  (use-package org-tempo
    :ensure nil)

  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :bind (:map projectile-mode-map ("C-c p" . projectile-command-map))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-git-submodule-command nil)
    (projectile-project-search-path '(("~/dev" . 1)))
    (projectile-switch-project-action 'projectile-dired)
    :init (projectile-mode))
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook
    (conf-unix-mode . rainbow-mode)
    (prog-mode . rainbow-mode))
#+end_src

** Rg
#+begin_src emacs-lisp
  (use-package rg)
#+end_src

** Rspec Mode
#+begin_src emacs-lisp
  (use-package rspec-mode)
#+end_src

** Slime
#+begin_src emacs-lisp
  (use-package slime
    :init (setq inferior-lisp-program "sbcl"))
#+end_src

** Vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :custom (which-key-idle-delay 2)
    :init (which-key-mode))
#+end_src

** Whitespace
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (prog-mode . whitespace-mode))
#+end_src

** Yaml Mode
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src
