#+TITLE: Emacs
#+AUTHOR: flaviogf
#+PROPERTY: header-args :tangle init.el

* Table of Contents :toc:
- [[#package-management][Package Management]]
- [[#customizations][Customizations]]
- [[#packages][Packages]]
  - [[#general][General]]
  - [[#all-the-icons][All The Icons]]
  - [[#avy][Avy]]
  - [[#company][Company]]
  - [[#counsel][Counsel]]
  - [[#dashboard][Dashboard]]
  - [[#docker][Docker]]
  - [[#dockerfile][Dockerfile]]
  - [[#doom-themes][Doom Themes]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#editorconfig][Editorconfig]]
  - [[#evil][Evil]]
  - [[#flychek][Flychek]]
  - [[#git-gutter][Git Gutter]]
  - [[#go-mode][Go Mode]]
  - [[#haskell-mode][Haskell Mode]]
  - [[#ivy][Ivy]]
  - [[#lua-mode][Lua Mode]]
  - [[#lsp-mode][LSP Mode]]
  - [[#lsp-ui][LSP UI]]
  - [[#magit][Magit]]
  - [[#marginalia][Marginalia]]
  - [[#org][Org]]
  - [[#org-roam][Org Roam]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-toc][Org Toc]]
  - [[#project][Project]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#rspec-mode][RSpec Mode]]
  - [[#ripgrep][Ripgrep]]
  - [[#slime][Slime]]
  - [[#swiper][Swiper]]
  - [[#which-key][Which Key]]
  - [[#yaml-mode][Yaml Mode]]

* Package Management
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package '(use-package diminish))
    (unless (package-installed-p package)
      (package-install package)))

  (require 'use-package)
  (require 'diminish)
#+end_src

* Customizations
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'prog-mode-hook (lambda() (modify-syntax-entry ?_ "w")))

  (add-to-list 'default-frame-alist '(alpha . (96 . 96)))
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono Nerd Font-16"))
  (add-to-list 'exec-path "/home/flaviogf/.asdf/shims")
  (add-to-list 'exec-path "/home/flaviogf/.asdf/bin")

  (customize-set-variable 'c-basic-offset 2)
  (customize-set-variable 'column-number-mode t)
  (customize-set-variable 'cperl-indent-level 2)
  (customize-set-variable 'dired-listing-switches "-agho --group-directories-first")
  (customize-set-variable 'display-line-numbers-type 'relative)
  (customize-set-variable 'indent-tabs-mode nil)
  (customize-set-variable 'inhibit-startup-message t)
  (customize-set-variable 'inhibit-splash-screen t)
  (customize-set-variable 'initial-scratch-message nil)
  (customize-set-variable 'make-backup-files nil)
  (customize-set-variable 'menu-bar-mode nil)
  (customize-set-variable 'recentf-mode t)
  (customize-set-variable 'scroll-bar-mode nil)
  (customize-set-variable 'tab-width 2)
  (customize-set-variable 'tool-bar-mode nil)
  (customize-set-variable 'truncate-lines t)
  (customize-set-variable 'use-package-always-ensure t)
  (customize-set-variable 'visible-bell t)

  (put 'dired-find-alternate-file 'disabled nil)

  (global-unset-key (kbd "C-SPC"))
#+end_src

* Packages
** General
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer my-leader-key :prefix "C-SPC"))
#+end_src

** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :config
    (my-leader-key
      "a t" 'avy-goto-char-timer))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :init (company-mode))
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :config
    (my-leader-key
      "c r" 'counsel-rg)
    :init (counsel-mode))
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-startup-banner 'logo)
    :init
    (dashboard-setup-startup-hook))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
    :config
    (my-leader-key
      "d" 'docker))
#+end_src

** Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")
#+end_src

** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init (load-theme 'doom-nord t))
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :custom
    (doom-modeline-minor-modes t)
    :init (doom-modeline-mode))
#+end_src

** Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :init (editorconfig-mode))
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package evil
    :custom
    (evil-kill-on-visual-paste)
    (evil-shift-width 2)
    (evil-want-C-u-scroll t)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    :init (evil-mode))

  (use-package evil-collection
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      (kbd "RET") 'dired-find-alternate-file
      "-" (lambda () (interactive) (find-alternate-file "..")))
    :init (evil-collection-init))
#+end_src

** Flychek
#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (my-leader-key
      "f t" 'flycheck-mode))
#+end_src

** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode))
#+end_src

** Go Mode
#+begin_src emacs-lisp
  (use-package go-mode
    :custom (gofmt-command "goimports")
    :hook (before-save . gofmt-before-save)
    :mode "\\.go\\'")
#+end_src

** Haskell Mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")
#+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :custom
    (enable-recursive-minibuffers t)
    (ivy-use-virtual-buffers t)
    :init (ivy-mode))
#+end_src

** Lua Mode
#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'")
#+end_src

** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook
    (go-mode . lsp)
    (python-mode . lsp)
    (ruby-mode . lsp)
    :custom
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-keymap-prefix "C-c l"))
#+end_src

** LSP UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :custom
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-hover t))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :init (marginalia-mode))
#+end_src

** Org
#+begin_src emacs-lisp
  (use-package org
    :config
    (my-leader-key
      "o t" 'org-todo-list
      "o _" 'org-timer-stop
      "o ;" 'org-timer-set-timer)
    :custom
    (org-agenda-files '("/home/flaviogf/dev/org-files/Archive.org" "/home/flaviogf/dev/org-files/TODO.org"))
    (org-confirm-babel-evaluate nil)
    (org-timer-display nil)
    (org-ellipsis " ▼ ")
    (org-hide-emphasis-markers t)
    (org-refile-targets '((org-agenda-files :maxlevel . 1)))
    (org-startup-folded t)
    (org-timer-format "%s")
    (org-tag-alist '(("chore" . ?c) ("study" . ?s) ("work" . ?w) ("pc" . ?p)))
    (org-todo-keywords '("TODO" "DOING" "DONE" "CANCELED"))
    :ensure nil
    :hook
    (org-mode . (lambda () (org-indent-mode)
                           (auto-fill-mode 0)
                           (setq evil-auto-indent nil)))
    :init
    (org-babel-do-load-languages 'org-babel-load-languages '((python . t) (ruby . t))))

  (dolist (face '((org-level-1 . 1.7)
                  (org-level-2 . 1.6)
                  (org-level-3 . 1.5)))
    (set-face-attribute (car face) nil :font "DejaVu Sans Mono Nerd Font" :weight 'medium :height (cdr face)))
#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-dailies-directory "daily")
    (org-roam-directory "/home/flaviogf/dev/org-files/notes")
    :init (org-roam-db-autosync-mode))
#+end_src

** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :custom
    (org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆"))
    (org-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦)))
    :hook (org-mode . org-superstar-mode))
#+end_src

** Org Toc
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** Project
#+begin_src emacs-lisp
  (use-package project
    :custom
    (project-switch-commands #'project-dired))
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook
    (conf-unix-mode . rainbow-mode)
    (prog-mode . rainbow-mode))
#+end_src

** RSpec Mode
#+begin_src emacs-lisp
  (use-package rspec-mode)
#+end_src

** Ripgrep
#+begin_src emacs-lisp
  (use-package rg)
#+end_src

** Slime
#+begin_src emacs-lisp
  (use-package slime
    :init (setq inferior-lisp-program "sbcl"))
#+end_src

** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :config
    (my-leader-key
      "s" 'swiper))
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :custom (which-key-idle-delay 2)
    :init (which-key-mode))
#+end_src

** Yaml Mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src
