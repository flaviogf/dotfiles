#+TITLE: Emacs
#+AUTHOR: flaviogf
#+PROPERTY: header-args :tangle init.el

* Table of Contents :toc:
- [[#package-management][Package Management]]
- [[#customizations][Customizations]]
- [[#packages][Packages]]
  - [[#all-the-icons][All The Icons]]
  - [[#company][Company]]
  - [[#docker][Docker]]
  - [[#doom-themes][Doom Themes]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#editorconfig][Editorconfig]]
  - [[#evil][Evil]]
  - [[#git-gutter][Git Gutter]]
  - [[#go-mode][Go Mode]]
  - [[#haskell-mode][Haskell Mode]]
  - [[#helm][Helm]]
  - [[#helm-ag][Helm Ag]]
  - [[#lsp-mode][LSP Mode]]
  - [[#magit][Magit]]
  - [[#org][Org]]
  - [[#org-roam][Org Roam]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-toc][Org Toc]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#ripgrep][Ripgrep]]
  - [[#slime][Slime]]
  - [[#swiper][Swiper]]
  - [[#vterm][Vterm]]
  - [[#which-key][Which Key]]
  - [[#yaml-mode][Yaml Mode]]

* Package Management
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

* Customizations
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-16"))
  (add-to-list 'exec-path "/home/flaviogf/.asdf/shims")
  (add-to-list 'exec-path "/home/flaviogf/.asdf/bin")

  (customize-set-variable 'c-basic-offset 2)
  (customize-set-variable 'column-number-mode t)
  (customize-set-variable 'cperl-indent-level 2)
  (customize-set-variable 'dired-listing-switches "-agho --group-directories-first")
  (customize-set-variable 'fill-column 120)
  (customize-set-variable 'indent-tabs-mode nil)
  (customize-set-variable 'inhibit-startup-message t)
  (customize-set-variable 'inhibit-splash-screen t)
  (customize-set-variable 'initial-scratch-message nil)
  (customize-set-variable 'make-backup-files nil)
  (customize-set-variable 'menu-bar-mode nil)
  (customize-set-variable 'project-switch-commands '((project-dired "dired") (project-find-file "find file")))
  (customize-set-variable 'recentf-mode t)
  (customize-set-variable 'scroll-bar-mode nil)
  (customize-set-variable 'tab-width 2)
  (customize-set-variable 'tab-bar-mode t)
  (customize-set-variable 'tab-bar-show nil)
  (customize-set-variable 'tool-bar-mode nil)
  (customize-set-variable 'truncate-lines t)
  (customize-set-variable 'use-package-always-ensure t)
  (customize-set-variable 'whitespace-line-column 120)
  (customize-set-variable 'whitespace-style '(face lines-tail))

  (add-hook 'org-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

* Packages
** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :init (company-mode))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))
#+end_src

** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :init (load-theme 'doom-dracula t))
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode))
#+end_src

** Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :init (editorconfig-mode))
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package evil
    :custom
    (evil-shift-width 2)
    (evil-want-C-u-scroll t)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    :init (evil-mode))

  (use-package evil-collection
    :after evil
    :init (evil-collection-init))
#+end_src

** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode))
#+end_src

** Go Mode
#+begin_src emacs-lisp
  (use-package go-mode
    :custom (gofmt-command "goimports")
    :hook (before-save . gofmt-before-save))
#+end_src

** Haskell Mode
#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :bind
    (("M-x" . helm-M-x))
    :init (helm-mode))
#+end_src

** Helm Ag
#+begin_src emacs-lisp
  (use-package helm-ag
    :bind
    ("C-x p a" . helm-do-ag-project-root))
#+end_src

** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook
    (go-mode . lsp)
    (ruby-mode . lsp)
    :custom
    (lsp-diagnostics-provider :none)
    (lsp-eldoc-enable-hover nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-keymap-prefix "C-c l")
    (lsp-modeline-code-actions-enable nil)
    (lsp-ui-sideline-enable nil))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Org
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-agenda-files '("/home/flaviogf/dev/org-files/TODO.org"))
    (org-confirm-babel-evaluate nil)
    (org-hide-emphasis-markers t)
    (org-startup-folded t)
    :ensure nil
    :init (org-babel-do-load-languages 'org-babel-load-languages '((ruby . t))))
#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-dailies-directory "daily")
    (org-roam-directory "/home/flaviogf/dev/org-files/notes")
    :init (org-roam-db-autosync-mode))
#+end_src

** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src

** Org Toc
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook
    (conf-unix-mode . rainbow-mode)
    (prog-mode . rainbow-mode))
#+end_src

** Ripgrep
#+begin_src emacs-lisp
  (use-package rg)
#+end_src

** Slime
#+begin_src emacs-lisp
  (use-package slime
    :init (setq inferior-lisp-program "sbcl"))
#+end_src

** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :bind (("C-s" . swiper)))
#+end_src

** Vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :custom (which-key-idle-delay 2)
    :init (which-key-mode))
#+end_src

** Yaml Mode
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src
